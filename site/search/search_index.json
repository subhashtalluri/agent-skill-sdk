{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agent Skill SDK","text":"<p>Welcome to the official documentation for the Agent Skill SDK \u2014 a modular, event-driven framework for building AI-powered, trigger-based agents using Python.</p>"},{"location":"#why-agent-skill-sdk","title":"\ud83d\ude80 Why Agent Skill SDK?","text":"<ul> <li>Build intelligent agents using simple Python functions (\"skills\")</li> <li>Trigger actions via timer, MQTT, HTTP, file watchers, cron, CoAP, and more</li> <li>Integrate Amazon Bedrock for goal-based reasoning</li> <li>Retry, backoff, and fallback built-in</li> <li>Full memory trace and observability</li> <li>FastAPI-powered dashboard included</li> </ul>"},{"location":"advanced_topics/","title":"Advanced Topics","text":""},{"location":"advanced_topics/#guardrails-retry","title":"Guardrails + Retry","text":"<pre><code>run_reasoning(goal, retries=2, fallback_action=\"noop\")\n</code></pre>"},{"location":"advanced_topics/#dynamic-dispatch","title":"Dynamic Dispatch","text":"<pre><code>context.agent.trigger(\"skill_name\", payload)\n</code></pre>"},{"location":"advanced_topics/#llm-trace-export","title":"LLM Trace Export","text":"<p>Includes memory used, prompt sent, and LLM response</p>"},{"location":"cli_dashboard/","title":"CLI and Dashboard","text":""},{"location":"cli_dashboard/#cli","title":"\ud83d\udd27 CLI","text":"<pre><code>agent register examples.fan_control.turn_on_fan\nagent trigger on_temperature_high --data '{\"temp\": 36}'\n</code></pre>"},{"location":"cli_dashboard/#dashboard","title":"\ud83e\udde0 Dashboard","text":"<pre><code>uvicorn dashboard.app:app --reload\n</code></pre> <p>Open <code>http://localhost:8000</code> to: - View skills - Trigger manually - View trace</p>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#run-as-a-service","title":"Run as a Service","text":"<pre><code>uvicorn dashboard.app:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"deployment/#dockerization","title":"Dockerization","text":"<pre><code>FROM python:3.10\nCOPY . /app\nWORKDIR /app\nRUN pip install .\nCMD [\"uvicorn\", \"dashboard.app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/#github-pages-mkdocs","title":"GitHub Pages (MkDocs)","text":"<pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"examples/","title":"Example Gallery","text":""},{"location":"examples/#fan-control","title":"Fan Control","text":"<pre><code>@skill(trigger=\"on_temperature_high\")\ndef turn_on_fan(context):\n    print(\"Fan ON\")\n</code></pre>"},{"location":"examples/#webhook-response","title":"Webhook Response","text":"<pre><code>@skill(trigger=\"on_http\")\ndef handle_webhook(context):\n    print(context.data)\n</code></pre>"},{"location":"examples/#llm-planning","title":"LLM Planning","text":"<pre><code>@skill(trigger=\"on_goal\")\ndef decide_action(context):\n    response = run_reasoning(context.get(\"goal\"))\n    context.agent.trigger(response[\"action\"])\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install agent-skill-sdk\n</code></pre>"},{"location":"getting_started/#folder-structure","title":"\ud83e\uddf1 Folder Structure","text":"<pre><code>agent_skill_sdk/\n\u251c\u2500\u2500 agent/\n\u251c\u2500\u2500 plugins/\n\u251c\u2500\u2500 skills/\n\u251c\u2500\u2500 cli/\n\u251c\u2500\u2500 config/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 tests/\n\u2514\u2500\u2500 dashboard/\n</code></pre>"},{"location":"getting_started/#first-run","title":"\ud83e\uddea First Run","text":"<pre><code>from agent_skill_sdk import Agent\nfrom examples.fan_control import turn_on_fan\n\nagent = Agent()\nagent.register(turn_on_fan)\nagent.trigger(\"on_temperature_high\", {\"temp\": 36})\n</code></pre>"},{"location":"llm_reasoning/","title":"LLM Reasoning with Amazon Bedrock","text":""},{"location":"llm_reasoning/#planner-skill","title":"\ud83e\udde0 Planner Skill","text":"<pre><code>@skill(trigger=\"on_goal\")\ndef bedrock_planner(context):\n    response = run_reasoning(goal, memory=context.memory.recall_last_n(5))\n    action = response.get(\"action\")\n    if action:\n        context.agent.trigger(action)\n</code></pre>"},{"location":"llm_reasoning/#prompt-template-store","title":"Prompt Template Store","text":"<pre><code>agent.templates.register(\"goal_plan\", \"You are solving: {goal}\\nMemory: {memory}\")\n</code></pre>"},{"location":"llm_reasoning/#fallback-logic","title":"Fallback Logic","text":"<ul> <li>Auto retries LLM if action missing</li> <li>Fallbacks to \"noop\" after max attempts</li> </ul>"},{"location":"memory_tracing/","title":"Memory and Tracing","text":"<ul> <li>Every skill invocation is logged to memory</li> <li>LLM reasoning is traceable with goal, template, result</li> <li>Export to JSON or CSV</li> </ul>"},{"location":"memory_tracing/#export-example","title":"Export Example","text":"<pre><code>agent.export_trace(\"json\")\nagent.export_trace(\"csv\")\n</code></pre>"},{"location":"triggers/","title":"Triggers","text":""},{"location":"triggers/#timer-trigger","title":"Timer Trigger","text":"<pre><code>from agent_skill_sdk.plugins import TimerTrigger\nTimerTrigger(interval=10, event_name=\"on_timer\").attach(agent)\n</code></pre>"},{"location":"triggers/#mqtt-trigger","title":"MQTT Trigger","text":"<pre><code>from agent_skill_sdk.plugins import MQTTTrigger\nMQTTTrigger(topic=\"agent/test\").attach(agent)\n</code></pre>"},{"location":"triggers/#http-trigger","title":"HTTP Trigger","text":"<pre><code>curl -X POST http://localhost:9000/trigger -d '{\"hello\": \"world\"}'\n</code></pre>"},{"location":"triggers/#cron-trigger","title":"Cron Trigger","text":"<pre><code>from agent_skill_sdk.plugins.cron import CronTrigger\nCronTrigger(\"10\", event_name=\"on_cron\").attach(agent)\n</code></pre>"},{"location":"triggers/#file-watcher","title":"File Watcher","text":"<pre><code>from agent_skill_sdk.plugins.file_watcher import FileWatcherTrigger\nFileWatcherTrigger(\"/tmp/watch.txt\").attach(agent)\n</code></pre>"},{"location":"triggers/#coap-trigger","title":"CoAP Trigger","text":"<pre><code>from agent_skill_sdk.plugins.coap import CoAPTrigger\nCoAPTrigger(\"trigger\").attach(agent)\n</code></pre>"},{"location":"writing_skills/","title":"Writing Skills","text":""},{"location":"writing_skills/#skill-decorator","title":"@skill Decorator","text":"<pre><code>from agent_skill_sdk import skill\n\n@skill(trigger=\"on_event\", retries=3, backoff=\"fixed\")\ndef my_skill(context):\n    print(context.data)\n</code></pre>"},{"location":"writing_skills/#context-object","title":"Context Object","text":"<pre><code>def my_skill(context):\n    value = context.get(\"key\")\n    context[\"result\"] = value + 1\n</code></pre>"}]}